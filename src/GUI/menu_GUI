from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.core.window import Window
import sys
sys.path.append("src")
from logica.huffman_cleanCode import HuffmanCoding

class HuffmanGUI(App):
    def build(self):
        self.huffman_coding = None

        layout = BoxLayout(orientation='vertical')

        self.text_input = TextInput(multiline=False, size_hint=(1, 0.5), background_color=(1, 1, 1, 1))
        layout.add_widget(Label(text='Texto a codificar:', color=(1, 1, 1, 1)))
        layout.add_widget(self.text_input)

        encode_button = Button(text='Codificar texto', background_color=(1, 1, 1, 1))
        encode_button.bind(on_press=self.encode_text)
        layout.add_widget(encode_button)

        decode_button = Button(text='Decodificar texto', background_color=(1, 1, 1, 1))
        decode_button.bind(on_press=self.decode_text)
        layout.add_widget(decode_button)

        self.output_label = TextInput(text='', size_hint=(1, 0.5), background_color=(1, 1, 1, 1))
        layout.add_widget(self.output_label)

        return layout

    def encode_text(self, instance):
            text = self.text_input.text
            if len(set(text)) != len(text):  # Verificar si hay caracteres repetidos
                popup = Popup(title='Error', content=Label(text='No se permiten caracteres repetidos'), size_hint=(None, None), size=(500, 200))
                popup.open()
                return
        
            try:
                self.huffman_coding = HuffmanCoding(text)
                encoded = self.huffman_coding.encode()
                self.output_label.text = f'Texto codificado: {encoded}'
                self.text_input.text = ''  # Limpiar el contenido del TextInput
            except ValueError as e:
                popup = Popup(title='Error', content=Label(text=str(e)), size_hint=(None, None), size=(500, 200))
                popup.open()
    

    def decode_text(self, instance):
        if self.huffman_coding:
            text_to_decode = self.text_input.text
            try:
                decoded_text = self.huffman_coding.decode(text_to_decode)
                self.output_label.text = f'Texto decodificado: {decoded_text}'
                self.text_input.text = ''  # Limpiar el contenido del TextInput
            except ValueError as e:
                popup = Popup(title='Error', content=Label(text=str(e)), size_hint=(None, None), size=(500, 200))
                popup.open()
        else:
            popup = Popup(title='Error', content=Label(text='Primero debes codificar un texto'), size_hint=(None, None), size=(300, 200))
            popup.open()

if __name__ == '__main__':
    Window.clearcolor = (0, 0, 0, 1)  # Establecer el color de fondo de la ventana a negro
    HuffmanGUI().run()



